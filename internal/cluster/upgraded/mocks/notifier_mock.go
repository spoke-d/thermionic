// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spoke-d/thermionic/internal/cluster/upgraded (interfaces: Notifier,NotifierProvider)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	cert "github.com/spoke-d/thermionic/internal/cert"
	notifier "github.com/spoke-d/thermionic/internal/cluster/notifier"
	upgraded "github.com/spoke-d/thermionic/internal/cluster/upgraded"
	config "github.com/spoke-d/thermionic/internal/config"
	client "github.com/spoke-d/thermionic/pkg/client"
	reflect "reflect"
)

// MockNotifier is a mock of Notifier interface
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockNotifier) Run(arg0 func(*client.Client) error, arg1 notifier.Policy) error {
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockNotifierMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockNotifier)(nil).Run), arg0, arg1)
}

// MockNotifierProvider is a mock of NotifierProvider interface
type MockNotifierProvider struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierProviderMockRecorder
}

// MockNotifierProviderMockRecorder is the mock recorder for MockNotifierProvider
type MockNotifierProviderMockRecorder struct {
	mock *MockNotifierProvider
}

// NewMockNotifierProvider creates a new mock instance
func NewMockNotifierProvider(ctrl *gomock.Controller) *MockNotifierProvider {
	mock := &MockNotifierProvider{ctrl: ctrl}
	mock.recorder = &MockNotifierProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotifierProvider) EXPECT() *MockNotifierProviderMockRecorder {
	return m.recorder
}

// New mocks base method
func (m *MockNotifierProvider) New(arg0 upgraded.State, arg1 *cert.Info, arg2 config.Schema) upgraded.Notifier {
	ret := m.ctrl.Call(m, "New", arg0, arg1, arg2)
	ret0, _ := ret[0].(upgraded.Notifier)
	return ret0
}

// New indicates an expected call of New
func (mr *MockNotifierProviderMockRecorder) New(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockNotifierProvider)(nil).New), arg0, arg1, arg2)
}
