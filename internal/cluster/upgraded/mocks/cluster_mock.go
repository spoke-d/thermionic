// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spoke-d/thermionic/internal/cluster/upgraded (interfaces: Cluster)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	db "github.com/spoke-d/thermionic/internal/db"
	reflect "reflect"
)

// MockCluster is a mock of Cluster interface
type MockCluster struct {
	ctrl     *gomock.Controller
	recorder *MockClusterMockRecorder
}

// MockClusterMockRecorder is the mock recorder for MockCluster
type MockClusterMockRecorder struct {
	mock *MockCluster
}

// NewMockCluster creates a new mock instance
func NewMockCluster(ctrl *gomock.Controller) *MockCluster {
	mock := &MockCluster{ctrl: ctrl}
	mock.recorder = &MockClusterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCluster) EXPECT() *MockClusterMockRecorder {
	return m.recorder
}

// EnterExclusive mocks base method
func (m *MockCluster) EnterExclusive() error {
	ret := m.ctrl.Call(m, "EnterExclusive")
	ret0, _ := ret[0].(error)
	return ret0
}

// EnterExclusive indicates an expected call of EnterExclusive
func (mr *MockClusterMockRecorder) EnterExclusive() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnterExclusive", reflect.TypeOf((*MockCluster)(nil).EnterExclusive))
}

// ExitExclusive mocks base method
func (m *MockCluster) ExitExclusive(arg0 func(*db.ClusterTx) error) error {
	ret := m.ctrl.Call(m, "ExitExclusive", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExitExclusive indicates an expected call of ExitExclusive
func (mr *MockClusterMockRecorder) ExitExclusive(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitExclusive", reflect.TypeOf((*MockCluster)(nil).ExitExclusive), arg0)
}

// NodeID mocks base method
func (m *MockCluster) NodeID(arg0 int64) {
	m.ctrl.Call(m, "NodeID", arg0)
}

// NodeID indicates an expected call of NodeID
func (mr *MockClusterMockRecorder) NodeID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeID", reflect.TypeOf((*MockCluster)(nil).NodeID), arg0)
}

// Transaction mocks base method
func (m *MockCluster) Transaction(arg0 func(*db.ClusterTx) error) error {
	ret := m.ctrl.Call(m, "Transaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction
func (mr *MockClusterMockRecorder) Transaction(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockCluster)(nil).Transaction), arg0)
}
