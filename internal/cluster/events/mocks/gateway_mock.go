// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spoke-d/thermionic/internal/cluster/events (interfaces: Endpoints)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	cert "github.com/spoke-d/thermionic/internal/cert"
	reflect "reflect"
)

// MockEndpoints is a mock of Endpoints interface
type MockEndpoints struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointsMockRecorder
}

// MockEndpointsMockRecorder is the mock recorder for MockEndpoints
type MockEndpointsMockRecorder struct {
	mock *MockEndpoints
}

// NewMockEndpoints creates a new mock instance
func NewMockEndpoints(ctrl *gomock.Controller) *MockEndpoints {
	mock := &MockEndpoints{ctrl: ctrl}
	mock.recorder = &MockEndpointsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEndpoints) EXPECT() *MockEndpointsMockRecorder {
	return m.recorder
}

// NetworkAddress mocks base method
func (m *MockEndpoints) NetworkAddress() string {
	ret := m.ctrl.Call(m, "NetworkAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// NetworkAddress indicates an expected call of NetworkAddress
func (mr *MockEndpointsMockRecorder) NetworkAddress() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkAddress", reflect.TypeOf((*MockEndpoints)(nil).NetworkAddress))
}

// NetworkCert mocks base method
func (m *MockEndpoints) NetworkCert() *cert.Info {
	ret := m.ctrl.Call(m, "NetworkCert")
	ret0, _ := ret[0].(*cert.Info)
	return ret0
}

// NetworkCert indicates an expected call of NetworkCert
func (mr *MockEndpointsMockRecorder) NetworkCert() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkCert", reflect.TypeOf((*MockEndpoints)(nil).NetworkCert))
}
