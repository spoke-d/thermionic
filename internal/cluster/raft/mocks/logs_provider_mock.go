// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spoke-d/thermionic/internal/cluster/raft (interfaces: LogsProvider,LogStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	raft0 "github.com/hashicorp/raft"
	raft "github.com/spoke-d/thermionic/internal/cluster/raft"
	reflect "reflect"
	time "time"
)

// MockLogsProvider is a mock of LogsProvider interface
type MockLogsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockLogsProviderMockRecorder
}

// MockLogsProviderMockRecorder is the mock recorder for MockLogsProvider
type MockLogsProviderMockRecorder struct {
	mock *MockLogsProvider
}

// NewMockLogsProvider creates a new mock instance
func NewMockLogsProvider(ctrl *gomock.Controller) *MockLogsProvider {
	mock := &MockLogsProvider{ctrl: ctrl}
	mock.recorder = &MockLogsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogsProvider) EXPECT() *MockLogsProviderMockRecorder {
	return m.recorder
}

// Logs mocks base method
func (m *MockLogsProvider) Logs(arg0 string, arg1 time.Duration) (raft.LogStore, error) {
	ret := m.ctrl.Call(m, "Logs", arg0, arg1)
	ret0, _ := ret[0].(raft.LogStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logs indicates an expected call of Logs
func (mr *MockLogsProviderMockRecorder) Logs(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockLogsProvider)(nil).Logs), arg0, arg1)
}

// MockLogStore is a mock of LogStore interface
type MockLogStore struct {
	ctrl     *gomock.Controller
	recorder *MockLogStoreMockRecorder
}

// MockLogStoreMockRecorder is the mock recorder for MockLogStore
type MockLogStoreMockRecorder struct {
	mock *MockLogStore
}

// NewMockLogStore creates a new mock instance
func NewMockLogStore(ctrl *gomock.Controller) *MockLogStore {
	mock := &MockLogStore{ctrl: ctrl}
	mock.recorder = &MockLogStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogStore) EXPECT() *MockLogStoreMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockLogStore) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockLogStoreMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLogStore)(nil).Close))
}

// DeleteRange mocks base method
func (m *MockLogStore) DeleteRange(arg0, arg1 uint64) error {
	ret := m.ctrl.Call(m, "DeleteRange", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRange indicates an expected call of DeleteRange
func (mr *MockLogStoreMockRecorder) DeleteRange(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRange", reflect.TypeOf((*MockLogStore)(nil).DeleteRange), arg0, arg1)
}

// FirstIndex mocks base method
func (m *MockLogStore) FirstIndex() (uint64, error) {
	ret := m.ctrl.Call(m, "FirstIndex")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirstIndex indicates an expected call of FirstIndex
func (mr *MockLogStoreMockRecorder) FirstIndex() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstIndex", reflect.TypeOf((*MockLogStore)(nil).FirstIndex))
}

// Get mocks base method
func (m *MockLogStore) Get(arg0 []byte) ([]byte, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockLogStoreMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLogStore)(nil).Get), arg0)
}

// GetLog mocks base method
func (m *MockLogStore) GetLog(arg0 uint64, arg1 *raft0.Log) error {
	ret := m.ctrl.Call(m, "GetLog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetLog indicates an expected call of GetLog
func (mr *MockLogStoreMockRecorder) GetLog(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLog", reflect.TypeOf((*MockLogStore)(nil).GetLog), arg0, arg1)
}

// GetUint64 mocks base method
func (m *MockLogStore) GetUint64(arg0 []byte) (uint64, error) {
	ret := m.ctrl.Call(m, "GetUint64", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUint64 indicates an expected call of GetUint64
func (mr *MockLogStoreMockRecorder) GetUint64(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUint64", reflect.TypeOf((*MockLogStore)(nil).GetUint64), arg0)
}

// LastIndex mocks base method
func (m *MockLogStore) LastIndex() (uint64, error) {
	ret := m.ctrl.Call(m, "LastIndex")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastIndex indicates an expected call of LastIndex
func (mr *MockLogStoreMockRecorder) LastIndex() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastIndex", reflect.TypeOf((*MockLogStore)(nil).LastIndex))
}

// Set mocks base method
func (m *MockLogStore) Set(arg0, arg1 []byte) error {
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockLogStoreMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLogStore)(nil).Set), arg0, arg1)
}

// SetUint64 mocks base method
func (m *MockLogStore) SetUint64(arg0 []byte, arg1 uint64) error {
	ret := m.ctrl.Call(m, "SetUint64", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUint64 indicates an expected call of SetUint64
func (mr *MockLogStoreMockRecorder) SetUint64(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUint64", reflect.TypeOf((*MockLogStore)(nil).SetUint64), arg0, arg1)
}

// StoreLog mocks base method
func (m *MockLogStore) StoreLog(arg0 *raft0.Log) error {
	ret := m.ctrl.Call(m, "StoreLog", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreLog indicates an expected call of StoreLog
func (mr *MockLogStoreMockRecorder) StoreLog(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreLog", reflect.TypeOf((*MockLogStore)(nil).StoreLog), arg0)
}

// StoreLogs mocks base method
func (m *MockLogStore) StoreLogs(arg0 []*raft0.Log) error {
	ret := m.ctrl.Call(m, "StoreLogs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreLogs indicates an expected call of StoreLogs
func (mr *MockLogStoreMockRecorder) StoreLogs(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreLogs", reflect.TypeOf((*MockLogStore)(nil).StoreLogs), arg0)
}
