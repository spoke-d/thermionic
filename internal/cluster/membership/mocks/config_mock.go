// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spoke-d/thermionic/internal/cluster/membership (interfaces: NodeConfigProvider,ClusterConfigProvider)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	config "github.com/spoke-d/thermionic/internal/cluster/config"
	config0 "github.com/spoke-d/thermionic/internal/config"
	db "github.com/spoke-d/thermionic/internal/db"
	node "github.com/spoke-d/thermionic/internal/node"
	reflect "reflect"
)

// MockNodeConfigProvider is a mock of NodeConfigProvider interface
type MockNodeConfigProvider struct {
	ctrl     *gomock.Controller
	recorder *MockNodeConfigProviderMockRecorder
}

// MockNodeConfigProviderMockRecorder is the mock recorder for MockNodeConfigProvider
type MockNodeConfigProviderMockRecorder struct {
	mock *MockNodeConfigProvider
}

// NewMockNodeConfigProvider creates a new mock instance
func NewMockNodeConfigProvider(ctrl *gomock.Controller) *MockNodeConfigProvider {
	mock := &MockNodeConfigProvider{ctrl: ctrl}
	mock.recorder = &MockNodeConfigProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeConfigProvider) EXPECT() *MockNodeConfigProviderMockRecorder {
	return m.recorder
}

// ConfigLoad mocks base method
func (m *MockNodeConfigProvider) ConfigLoad(arg0 *db.NodeTx, arg1 config0.Schema) (*node.Config, error) {
	ret := m.ctrl.Call(m, "ConfigLoad", arg0, arg1)
	ret0, _ := ret[0].(*node.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigLoad indicates an expected call of ConfigLoad
func (mr *MockNodeConfigProviderMockRecorder) ConfigLoad(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigLoad", reflect.TypeOf((*MockNodeConfigProvider)(nil).ConfigLoad), arg0, arg1)
}

// MockClusterConfigProvider is a mock of ClusterConfigProvider interface
type MockClusterConfigProvider struct {
	ctrl     *gomock.Controller
	recorder *MockClusterConfigProviderMockRecorder
}

// MockClusterConfigProviderMockRecorder is the mock recorder for MockClusterConfigProvider
type MockClusterConfigProviderMockRecorder struct {
	mock *MockClusterConfigProvider
}

// NewMockClusterConfigProvider creates a new mock instance
func NewMockClusterConfigProvider(ctrl *gomock.Controller) *MockClusterConfigProvider {
	mock := &MockClusterConfigProvider{ctrl: ctrl}
	mock.recorder = &MockClusterConfigProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterConfigProvider) EXPECT() *MockClusterConfigProviderMockRecorder {
	return m.recorder
}

// ConfigLoad mocks base method
func (m *MockClusterConfigProvider) ConfigLoad(arg0 *db.ClusterTx, arg1 config0.Schema) (*config.Config, error) {
	ret := m.ctrl.Call(m, "ConfigLoad", arg0, arg1)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigLoad indicates an expected call of ConfigLoad
func (mr *MockClusterConfigProviderMockRecorder) ConfigLoad(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigLoad", reflect.TypeOf((*MockClusterConfigProvider)(nil).ConfigLoad), arg0, arg1)
}
