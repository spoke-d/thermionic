// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spoke-d/thermionic/internal/fsys (interfaces: FileSystem)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	fsys "github.com/spoke-d/thermionic/internal/fsys"
	os "os"
	filepath "path/filepath"
	reflect "reflect"
	time "time"
)

// MockFileSystem is a mock of FileSystem interface
type MockFileSystem struct {
	ctrl     *gomock.Controller
	recorder *MockFileSystemMockRecorder
}

// MockFileSystemMockRecorder is the mock recorder for MockFileSystem
type MockFileSystemMockRecorder struct {
	mock *MockFileSystem
}

// NewMockFileSystem creates a new mock instance
func NewMockFileSystem(ctrl *gomock.Controller) *MockFileSystem {
	mock := &MockFileSystem{ctrl: ctrl}
	mock.recorder = &MockFileSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileSystem) EXPECT() *MockFileSystemMockRecorder {
	return m.recorder
}

// Chtimes mocks base method
func (m *MockFileSystem) Chtimes(arg0 string, arg1, arg2 time.Time) error {
	ret := m.ctrl.Call(m, "Chtimes", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chtimes indicates an expected call of Chtimes
func (mr *MockFileSystemMockRecorder) Chtimes(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chtimes", reflect.TypeOf((*MockFileSystem)(nil).Chtimes), arg0, arg1, arg2)
}

// CopyDir mocks base method
func (m *MockFileSystem) CopyDir(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "CopyDir", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyDir indicates an expected call of CopyDir
func (mr *MockFileSystemMockRecorder) CopyDir(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDir", reflect.TypeOf((*MockFileSystem)(nil).CopyDir), arg0, arg1)
}

// CopyFile mocks base method
func (m *MockFileSystem) CopyFile(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "CopyFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFile indicates an expected call of CopyFile
func (mr *MockFileSystemMockRecorder) CopyFile(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFile", reflect.TypeOf((*MockFileSystem)(nil).CopyFile), arg0, arg1)
}

// Create mocks base method
func (m *MockFileSystem) Create(arg0 string) (fsys.File, error) {
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(fsys.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockFileSystemMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFileSystem)(nil).Create), arg0)
}

// Exists mocks base method
func (m *MockFileSystem) Exists(arg0 string) bool {
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists
func (mr *MockFileSystemMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockFileSystem)(nil).Exists), arg0)
}

// Lock mocks base method
func (m *MockFileSystem) Lock(arg0 string) (fsys.Releaser, bool, error) {
	ret := m.ctrl.Call(m, "Lock", arg0)
	ret0, _ := ret[0].(fsys.Releaser)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Lock indicates an expected call of Lock
func (mr *MockFileSystemMockRecorder) Lock(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockFileSystem)(nil).Lock), arg0)
}

// Mkdir mocks base method
func (m *MockFileSystem) Mkdir(arg0 string, arg1 os.FileMode) error {
	ret := m.ctrl.Call(m, "Mkdir", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mkdir indicates an expected call of Mkdir
func (mr *MockFileSystemMockRecorder) Mkdir(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mkdir", reflect.TypeOf((*MockFileSystem)(nil).Mkdir), arg0, arg1)
}

// MkdirAll mocks base method
func (m *MockFileSystem) MkdirAll(arg0 string, arg1 os.FileMode) error {
	ret := m.ctrl.Call(m, "MkdirAll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll
func (mr *MockFileSystemMockRecorder) MkdirAll(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockFileSystem)(nil).MkdirAll), arg0, arg1)
}

// Open mocks base method
func (m *MockFileSystem) Open(arg0 string) (fsys.File, error) {
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(fsys.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *MockFileSystemMockRecorder) Open(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockFileSystem)(nil).Open), arg0)
}

// OpenFile mocks base method
func (m *MockFileSystem) OpenFile(arg0 string, arg1 int, arg2 os.FileMode) (fsys.File, error) {
	ret := m.ctrl.Call(m, "OpenFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(fsys.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile
func (mr *MockFileSystemMockRecorder) OpenFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockFileSystem)(nil).OpenFile), arg0, arg1, arg2)
}

// Remove mocks base method
func (m *MockFileSystem) Remove(arg0 string) error {
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockFileSystemMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockFileSystem)(nil).Remove), arg0)
}

// RemoveAll mocks base method
func (m *MockFileSystem) RemoveAll(arg0 string) error {
	ret := m.ctrl.Call(m, "RemoveAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll
func (mr *MockFileSystemMockRecorder) RemoveAll(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockFileSystem)(nil).RemoveAll), arg0)
}

// Rename mocks base method
func (m *MockFileSystem) Rename(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "Rename", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rename indicates an expected call of Rename
func (mr *MockFileSystemMockRecorder) Rename(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockFileSystem)(nil).Rename), arg0, arg1)
}

// Symlink mocks base method
func (m *MockFileSystem) Symlink(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "Symlink", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Symlink indicates an expected call of Symlink
func (mr *MockFileSystemMockRecorder) Symlink(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Symlink", reflect.TypeOf((*MockFileSystem)(nil).Symlink), arg0, arg1)
}

// Walk mocks base method
func (m *MockFileSystem) Walk(arg0 string, arg1 filepath.WalkFunc) error {
	ret := m.ctrl.Call(m, "Walk", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Walk indicates an expected call of Walk
func (mr *MockFileSystemMockRecorder) Walk(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockFileSystem)(nil).Walk), arg0, arg1)
}
