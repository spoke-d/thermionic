// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spoke-d/thermionic/internal/cluster/membership (interfaces: Gateway)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	go_dqlite "github.com/CanonicalLtd/go-dqlite"
	gomock "github.com/golang/mock/gomock"
	cert "github.com/spoke-d/thermionic/internal/cert"
	membership "github.com/spoke-d/thermionic/internal/cluster/membership"
	db "github.com/spoke-d/thermionic/internal/db"
	cluster "github.com/spoke-d/thermionic/internal/db/cluster"
	reflect "reflect"
)

// MockGateway is a mock of Gateway interface
type MockGateway struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayMockRecorder
}

// MockGatewayMockRecorder is the mock recorder for MockGateway
type MockGatewayMockRecorder struct {
	mock *MockGateway
}

// NewMockGateway creates a new mock instance
func NewMockGateway(ctrl *gomock.Controller) *MockGateway {
	mock := &MockGateway{ctrl: ctrl}
	mock.recorder = &MockGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGateway) EXPECT() *MockGatewayMockRecorder {
	return m.recorder
}

// Cert mocks base method
func (m *MockGateway) Cert() *cert.Info {
	ret := m.ctrl.Call(m, "Cert")
	ret0, _ := ret[0].(*cert.Info)
	return ret0
}

// Cert indicates an expected call of Cert
func (mr *MockGatewayMockRecorder) Cert() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cert", reflect.TypeOf((*MockGateway)(nil).Cert))
}

// Context mocks base method
func (m *MockGateway) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockGatewayMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockGateway)(nil).Context))
}

// DB mocks base method
func (m *MockGateway) DB() membership.Node {
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(membership.Node)
	return ret0
}

// DB indicates an expected call of DB
func (mr *MockGatewayMockRecorder) DB() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockGateway)(nil).DB))
}

// DialFunc mocks base method
func (m *MockGateway) DialFunc() go_dqlite.DialFunc {
	ret := m.ctrl.Call(m, "DialFunc")
	ret0, _ := ret[0].(go_dqlite.DialFunc)
	return ret0
}

// DialFunc indicates an expected call of DialFunc
func (mr *MockGatewayMockRecorder) DialFunc() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialFunc", reflect.TypeOf((*MockGateway)(nil).DialFunc))
}

// Init mocks base method
func (m *MockGateway) Init(arg0 *cert.Info) error {
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockGatewayMockRecorder) Init(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockGateway)(nil).Init), arg0)
}

// IsDatabaseNode mocks base method
func (m *MockGateway) IsDatabaseNode() bool {
	ret := m.ctrl.Call(m, "IsDatabaseNode")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDatabaseNode indicates an expected call of IsDatabaseNode
func (mr *MockGatewayMockRecorder) IsDatabaseNode() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDatabaseNode", reflect.TypeOf((*MockGateway)(nil).IsDatabaseNode))
}

// Raft mocks base method
func (m *MockGateway) Raft() membership.RaftInstance {
	ret := m.ctrl.Call(m, "Raft")
	ret0, _ := ret[0].(membership.RaftInstance)
	return ret0
}

// Raft indicates an expected call of Raft
func (mr *MockGatewayMockRecorder) Raft() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raft", reflect.TypeOf((*MockGateway)(nil).Raft))
}

// RaftNodes mocks base method
func (m *MockGateway) RaftNodes() ([]db.RaftNode, error) {
	ret := m.ctrl.Call(m, "RaftNodes")
	ret0, _ := ret[0].([]db.RaftNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RaftNodes indicates an expected call of RaftNodes
func (mr *MockGatewayMockRecorder) RaftNodes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RaftNodes", reflect.TypeOf((*MockGateway)(nil).RaftNodes))
}

// Reset mocks base method
func (m *MockGateway) Reset(arg0 *cert.Info) error {
	ret := m.ctrl.Call(m, "Reset", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset
func (mr *MockGatewayMockRecorder) Reset(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockGateway)(nil).Reset), arg0)
}

// ServerStore mocks base method
func (m *MockGateway) ServerStore() cluster.ServerStore {
	ret := m.ctrl.Call(m, "ServerStore")
	ret0, _ := ret[0].(cluster.ServerStore)
	return ret0
}

// ServerStore indicates an expected call of ServerStore
func (mr *MockGatewayMockRecorder) ServerStore() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerStore", reflect.TypeOf((*MockGateway)(nil).ServerStore))
}

// Shutdown mocks base method
func (m *MockGateway) Shutdown() error {
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockGatewayMockRecorder) Shutdown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockGateway)(nil).Shutdown))
}

// WaitLeadership mocks base method
func (m *MockGateway) WaitLeadership() error {
	ret := m.ctrl.Call(m, "WaitLeadership")
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitLeadership indicates an expected call of WaitLeadership
func (mr *MockGatewayMockRecorder) WaitLeadership() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitLeadership", reflect.TypeOf((*MockGateway)(nil).WaitLeadership))
}
