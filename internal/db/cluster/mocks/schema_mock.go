// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spoke-d/thermionic/internal/db/cluster (interfaces: Schema,SchemaProvider)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	cluster "github.com/spoke-d/thermionic/internal/db/cluster"
	database "github.com/spoke-d/thermionic/internal/db/database"
	schema "github.com/spoke-d/thermionic/internal/db/schema"
	reflect "reflect"
)

// MockSchema is a mock of Schema interface
type MockSchema struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaMockRecorder
}

// MockSchemaMockRecorder is the mock recorder for MockSchema
type MockSchemaMockRecorder struct {
	mock *MockSchema
}

// NewMockSchema creates a new mock instance
func NewMockSchema(ctrl *gomock.Controller) *MockSchema {
	mock := &MockSchema{ctrl: ctrl}
	mock.recorder = &MockSchemaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSchema) EXPECT() *MockSchemaMockRecorder {
	return m.recorder
}

// Check mocks base method
func (m *MockSchema) Check(arg0 schema.Check) {
	m.ctrl.Call(m, "Check", arg0)
}

// Check indicates an expected call of Check
func (mr *MockSchemaMockRecorder) Check(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockSchema)(nil).Check), arg0)
}

// Ensure mocks base method
func (m *MockSchema) Ensure(arg0 database.DB) (int, error) {
	ret := m.ctrl.Call(m, "Ensure", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ensure indicates an expected call of Ensure
func (mr *MockSchemaMockRecorder) Ensure(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ensure", reflect.TypeOf((*MockSchema)(nil).Ensure), arg0)
}

// File mocks base method
func (m *MockSchema) File(arg0 string) {
	m.ctrl.Call(m, "File", arg0)
}

// File indicates an expected call of File
func (mr *MockSchemaMockRecorder) File(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "File", reflect.TypeOf((*MockSchema)(nil).File), arg0)
}

// Fresh mocks base method
func (m *MockSchema) Fresh(arg0 string) {
	m.ctrl.Call(m, "Fresh", arg0)
}

// Fresh indicates an expected call of Fresh
func (mr *MockSchemaMockRecorder) Fresh(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fresh", reflect.TypeOf((*MockSchema)(nil).Fresh), arg0)
}

// Hook mocks base method
func (m *MockSchema) Hook(arg0 schema.Hook) {
	m.ctrl.Call(m, "Hook", arg0)
}

// Hook indicates an expected call of Hook
func (mr *MockSchemaMockRecorder) Hook(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hook", reflect.TypeOf((*MockSchema)(nil).Hook), arg0)
}

// MockSchemaProvider is a mock of SchemaProvider interface
type MockSchemaProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaProviderMockRecorder
}

// MockSchemaProviderMockRecorder is the mock recorder for MockSchemaProvider
type MockSchemaProviderMockRecorder struct {
	mock *MockSchemaProvider
}

// NewMockSchemaProvider creates a new mock instance
func NewMockSchemaProvider(ctrl *gomock.Controller) *MockSchemaProvider {
	mock := &MockSchemaProvider{ctrl: ctrl}
	mock.recorder = &MockSchemaProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSchemaProvider) EXPECT() *MockSchemaProviderMockRecorder {
	return m.recorder
}

// Schema mocks base method
func (m *MockSchemaProvider) Schema() cluster.Schema {
	ret := m.ctrl.Call(m, "Schema")
	ret0, _ := ret[0].(cluster.Schema)
	return ret0
}

// Schema indicates an expected call of Schema
func (mr *MockSchemaProviderMockRecorder) Schema() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schema", reflect.TypeOf((*MockSchemaProvider)(nil).Schema))
}

// Updates mocks base method
func (m *MockSchemaProvider) Updates() []schema.Update {
	ret := m.ctrl.Call(m, "Updates")
	ret0, _ := ret[0].([]schema.Update)
	return ret0
}

// Updates indicates an expected call of Updates
func (mr *MockSchemaProviderMockRecorder) Updates() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockSchemaProvider)(nil).Updates))
}
