// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spoke-d/thermionic/internal/db/node (interfaces: DatabaseRegistrar,DatabaseOpener,DatabaseIO)

// Package mocks is a generated GoMock package.
package mocks

import (
	driver "database/sql/driver"
	gomock "github.com/golang/mock/gomock"
	database "github.com/spoke-d/thermionic/internal/db/database"
	reflect "reflect"
)

// MockDatabaseRegistrar is a mock of DatabaseRegistrar interface
type MockDatabaseRegistrar struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseRegistrarMockRecorder
}

// MockDatabaseRegistrarMockRecorder is the mock recorder for MockDatabaseRegistrar
type MockDatabaseRegistrarMockRecorder struct {
	mock *MockDatabaseRegistrar
}

// NewMockDatabaseRegistrar creates a new mock instance
func NewMockDatabaseRegistrar(ctrl *gomock.Controller) *MockDatabaseRegistrar {
	mock := &MockDatabaseRegistrar{ctrl: ctrl}
	mock.recorder = &MockDatabaseRegistrarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabaseRegistrar) EXPECT() *MockDatabaseRegistrarMockRecorder {
	return m.recorder
}

// Drivers mocks base method
func (m *MockDatabaseRegistrar) Drivers() []string {
	ret := m.ctrl.Call(m, "Drivers")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Drivers indicates an expected call of Drivers
func (mr *MockDatabaseRegistrarMockRecorder) Drivers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drivers", reflect.TypeOf((*MockDatabaseRegistrar)(nil).Drivers))
}

// Register mocks base method
func (m *MockDatabaseRegistrar) Register(arg0 string, arg1 driver.Driver) {
	m.ctrl.Call(m, "Register", arg0, arg1)
}

// Register indicates an expected call of Register
func (mr *MockDatabaseRegistrarMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockDatabaseRegistrar)(nil).Register), arg0, arg1)
}

// MockDatabaseOpener is a mock of DatabaseOpener interface
type MockDatabaseOpener struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseOpenerMockRecorder
}

// MockDatabaseOpenerMockRecorder is the mock recorder for MockDatabaseOpener
type MockDatabaseOpenerMockRecorder struct {
	mock *MockDatabaseOpener
}

// NewMockDatabaseOpener creates a new mock instance
func NewMockDatabaseOpener(ctrl *gomock.Controller) *MockDatabaseOpener {
	mock := &MockDatabaseOpener{ctrl: ctrl}
	mock.recorder = &MockDatabaseOpenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabaseOpener) EXPECT() *MockDatabaseOpenerMockRecorder {
	return m.recorder
}

// Open mocks base method
func (m *MockDatabaseOpener) Open(arg0, arg1 string) (database.DB, error) {
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].(database.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *MockDatabaseOpenerMockRecorder) Open(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDatabaseOpener)(nil).Open), arg0, arg1)
}

// MockDatabaseIO is a mock of DatabaseIO interface
type MockDatabaseIO struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseIOMockRecorder
}

// MockDatabaseIOMockRecorder is the mock recorder for MockDatabaseIO
type MockDatabaseIOMockRecorder struct {
	mock *MockDatabaseIO
}

// NewMockDatabaseIO creates a new mock instance
func NewMockDatabaseIO(ctrl *gomock.Controller) *MockDatabaseIO {
	mock := &MockDatabaseIO{ctrl: ctrl}
	mock.recorder = &MockDatabaseIOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabaseIO) EXPECT() *MockDatabaseIOMockRecorder {
	return m.recorder
}

// Drivers mocks base method
func (m *MockDatabaseIO) Drivers() []string {
	ret := m.ctrl.Call(m, "Drivers")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Drivers indicates an expected call of Drivers
func (mr *MockDatabaseIOMockRecorder) Drivers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drivers", reflect.TypeOf((*MockDatabaseIO)(nil).Drivers))
}

// Open mocks base method
func (m *MockDatabaseIO) Open(arg0, arg1 string) (database.DB, error) {
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].(database.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *MockDatabaseIOMockRecorder) Open(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDatabaseIO)(nil).Open), arg0, arg1)
}

// Register mocks base method
func (m *MockDatabaseIO) Register(arg0 string, arg1 driver.Driver) {
	m.ctrl.Call(m, "Register", arg0, arg1)
}

// Register indicates an expected call of Register
func (mr *MockDatabaseIOMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockDatabaseIO)(nil).Register), arg0, arg1)
}
