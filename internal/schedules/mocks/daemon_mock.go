// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spoke-d/thermionic/internal/schedules (interfaces: Daemon)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	config "github.com/spoke-d/thermionic/internal/config"
	schedules "github.com/spoke-d/thermionic/internal/schedules"
	reflect "reflect"
)

// MockDaemon is a mock of Daemon interface
type MockDaemon struct {
	ctrl     *gomock.Controller
	recorder *MockDaemonMockRecorder
}

// MockDaemonMockRecorder is the mock recorder for MockDaemon
type MockDaemonMockRecorder struct {
	mock *MockDaemon
}

// NewMockDaemon creates a new mock instance
func NewMockDaemon(ctrl *gomock.Controller) *MockDaemon {
	mock := &MockDaemon{ctrl: ctrl}
	mock.recorder = &MockDaemonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDaemon) EXPECT() *MockDaemonMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockDaemon) Cluster() schedules.Cluster {
	ret := m.ctrl.Call(m, "Cluster")
	ret0, _ := ret[0].(schedules.Cluster)
	return ret0
}

// Cluster indicates an expected call of Cluster
func (mr *MockDaemonMockRecorder) Cluster() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockDaemon)(nil).Cluster))
}

// Gateway mocks base method
func (m *MockDaemon) Gateway() schedules.Gateway {
	ret := m.ctrl.Call(m, "Gateway")
	ret0, _ := ret[0].(schedules.Gateway)
	return ret0
}

// Gateway indicates an expected call of Gateway
func (mr *MockDaemonMockRecorder) Gateway() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gateway", reflect.TypeOf((*MockDaemon)(nil).Gateway))
}

// Node mocks base method
func (m *MockDaemon) Node() schedules.Node {
	ret := m.ctrl.Call(m, "Node")
	ret0, _ := ret[0].(schedules.Node)
	return ret0
}

// Node indicates an expected call of Node
func (mr *MockDaemonMockRecorder) Node() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Node", reflect.TypeOf((*MockDaemon)(nil).Node))
}

// NodeConfigSchema mocks base method
func (m *MockDaemon) NodeConfigSchema() config.Schema {
	ret := m.ctrl.Call(m, "NodeConfigSchema")
	ret0, _ := ret[0].(config.Schema)
	return ret0
}

// NodeConfigSchema indicates an expected call of NodeConfigSchema
func (mr *MockDaemonMockRecorder) NodeConfigSchema() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigSchema", reflect.TypeOf((*MockDaemon)(nil).NodeConfigSchema))
}
